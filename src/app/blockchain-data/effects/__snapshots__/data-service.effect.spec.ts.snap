// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataServiceEffects should dispatch request data action on fetch action 1`] = `
Actions {
  "_isScalar": false,
  "operator": MapOperator {
    "project": [Function],
    "thisArg": undefined,
  },
  "source": Actions {
    "_isScalar": false,
    "operator": FilterOperator {
      "predicate": [Function],
      "thisArg": undefined,
    },
    "source": TestActions {
      "_isScalar": false,
      "source": HotObservable {
        "_isScalar": false,
        "error": undefined,
        "marbles": "-a",
        "source": SubscriptionLoggable {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "messages": Array [
            Object {
              "frame": 10,
              "notification": Notification {
                "error": undefined,
                "hasValue": true,
                "kind": "N",
                "value": FetchData {
                  "payload": Object {
                    "key": "ticker",
                    "query": null,
                  },
                  "type": "[Blockchain Data Feature API] Fetch data",
                },
              },
            },
          ],
          "observers": Array [],
          "scheduler": TestScheduler {
            "SchedulerAction": [Function],
            "actions": Array [],
            "active": false,
            "assertDeepEqual": [Function],
            "coldObservables": Array [
              SubscriptionLoggable {
                "_isScalar": false,
                "_subscribe": [Function],
                "messages": Array [
                  Object {
                    "frame": 10,
                    "notification": Notification {
                      "error": undefined,
                      "hasValue": true,
                      "kind": "N",
                      "value": Request {
                        "payload": Object {
                          "key": "ticker",
                          "query": null,
                        },
                        "type": "[Blockchain Data Feature API] Data service request",
                      },
                    },
                  },
                ],
                "scheduler": [Circular],
                "subscriptions": Array [],
              },
            ],
            "flushTests": Array [],
            "frame": 0,
            "hotObservables": Array [
              [Circular],
            ],
            "index": -1,
            "maxFrames": 750,
            "now": [Function],
            "scheduled": undefined,
          },
          "subscriptions": Array [],
          "thrownError": null,
        },
        "values": Object {
          "a": FetchData {
            "payload": Object {
              "key": "ticker",
              "query": null,
            },
            "type": "[Blockchain Data Feature API] Fetch data",
          },
        },
      },
    },
  },
}
`;

exports[`DataServiceEffects should request convert to BTC on fetch data action and then dispatch response action 1`] = `
Actions {
  "_isScalar": false,
  "operator": MapOperator {
    "project": [Function],
    "thisArg": undefined,
  },
  "source": Actions {
    "_isScalar": false,
    "operator": SwitchMapOperator {
      "project": [Function],
    },
    "source": Actions {
      "_isScalar": false,
      "operator": FilterOperator {
        "predicate": [Function],
        "thisArg": undefined,
      },
      "source": Actions {
        "_isScalar": false,
        "operator": FilterOperator {
          "predicate": [Function],
          "thisArg": undefined,
        },
        "source": TestActions {
          "_isScalar": false,
          "source": HotObservable {
            "_isScalar": false,
            "error": undefined,
            "marbles": "-a",
            "source": SubscriptionLoggable {
              "_isScalar": false,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "messages": Array [
                Object {
                  "frame": 10,
                  "notification": Notification {
                    "error": undefined,
                    "hasValue": true,
                    "kind": "N",
                    "value": FetchData {
                      "payload": Object {
                        "key": "tobtc",
                        "query": Object {
                          "currency": "USD",
                          "value": 200,
                        },
                      },
                      "type": "[Blockchain Data Feature API] Fetch data",
                    },
                  },
                },
              ],
              "observers": Array [],
              "scheduler": TestScheduler {
                "SchedulerAction": [Function],
                "actions": Array [],
                "active": false,
                "assertDeepEqual": [Function],
                "coldObservables": Array [
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 10,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": 0.12331,
                        },
                      },
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": false,
                          "kind": "C",
                          "value": undefined,
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": Response {
                            "payload": Object {
                              "key": "tobtc",
                              "response": 0.12331,
                            },
                            "type": "[Blockchain Data Feature API] Data service response",
                          },
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                ],
                "flushTests": Array [],
                "frame": 0,
                "hotObservables": Array [
                  [Circular],
                ],
                "index": -1,
                "maxFrames": 750,
                "now": [Function],
                "scheduled": undefined,
              },
              "subscriptions": Array [],
              "thrownError": null,
            },
            "values": Object {
              "a": FetchData {
                "payload": Object {
                  "key": "tobtc",
                  "query": Object {
                    "currency": "USD",
                    "value": 200,
                  },
                },
                "type": "[Blockchain Data Feature API] Fetch data",
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`DataServiceEffects should request market data prices on fetch data action and then dispatch response action 1`] = `
Actions {
  "_isScalar": false,
  "operator": MapOperator {
    "project": [Function],
    "thisArg": undefined,
  },
  "source": Actions {
    "_isScalar": false,
    "operator": SwitchMapOperator {
      "project": [Function],
    },
    "source": Actions {
      "_isScalar": false,
      "operator": FilterOperator {
        "predicate": [Function],
        "thisArg": undefined,
      },
      "source": Actions {
        "_isScalar": false,
        "operator": FilterOperator {
          "predicate": [Function],
          "thisArg": undefined,
        },
        "source": TestActions {
          "_isScalar": false,
          "source": HotObservable {
            "_isScalar": false,
            "error": undefined,
            "marbles": "-a",
            "source": SubscriptionLoggable {
              "_isScalar": false,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "messages": Array [
                Object {
                  "frame": 10,
                  "notification": Notification {
                    "error": undefined,
                    "hasValue": true,
                    "kind": "N",
                    "value": FetchData {
                      "payload": Object {
                        "key": "ticker",
                        "query": null,
                      },
                      "type": "[Blockchain Data Feature API] Fetch data",
                    },
                  },
                },
              ],
              "observers": Array [],
              "scheduler": TestScheduler {
                "SchedulerAction": [Function],
                "actions": Array [],
                "active": false,
                "assertDeepEqual": [Function],
                "coldObservables": Array [
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 10,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": Object {},
                        },
                      },
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": false,
                          "kind": "C",
                          "value": undefined,
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": Response {
                            "payload": Object {
                              "key": "ticker",
                              "response": Object {},
                            },
                            "type": "[Blockchain Data Feature API] Data service response",
                          },
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                ],
                "flushTests": Array [],
                "frame": 0,
                "hotObservables": Array [
                  [Circular],
                ],
                "index": -1,
                "maxFrames": 750,
                "now": [Function],
                "scheduled": undefined,
              },
              "subscriptions": Array [],
              "thrownError": null,
            },
            "values": Object {
              "a": FetchData {
                "payload": Object {
                  "key": "ticker",
                  "query": null,
                },
                "type": "[Blockchain Data Feature API] Fetch data",
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`DataServiceEffects should request stats information on fetch data action and then dispatch response action 1`] = `
Actions {
  "_isScalar": false,
  "operator": MapOperator {
    "project": [Function],
    "thisArg": undefined,
  },
  "source": Actions {
    "_isScalar": false,
    "operator": SwitchMapOperator {
      "project": [Function],
    },
    "source": Actions {
      "_isScalar": false,
      "operator": FilterOperator {
        "predicate": [Function],
        "thisArg": undefined,
      },
      "source": Actions {
        "_isScalar": false,
        "operator": FilterOperator {
          "predicate": [Function],
          "thisArg": undefined,
        },
        "source": TestActions {
          "_isScalar": false,
          "source": HotObservable {
            "_isScalar": false,
            "error": undefined,
            "marbles": "-a",
            "source": SubscriptionLoggable {
              "_isScalar": false,
              "closed": false,
              "hasError": false,
              "isStopped": false,
              "messages": Array [
                Object {
                  "frame": 10,
                  "notification": Notification {
                    "error": undefined,
                    "hasValue": true,
                    "kind": "N",
                    "value": FetchData {
                      "payload": Object {
                        "key": "stats",
                        "query": null,
                      },
                      "type": "[Blockchain Data Feature API] Fetch data",
                    },
                  },
                },
              ],
              "observers": Array [],
              "scheduler": TestScheduler {
                "SchedulerAction": [Function],
                "actions": Array [],
                "active": false,
                "assertDeepEqual": [Function],
                "coldObservables": Array [
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 10,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": Object {},
                        },
                      },
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": false,
                          "kind": "C",
                          "value": undefined,
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                  SubscriptionLoggable {
                    "_isScalar": false,
                    "_subscribe": [Function],
                    "messages": Array [
                      Object {
                        "frame": 20,
                        "notification": Notification {
                          "error": undefined,
                          "hasValue": true,
                          "kind": "N",
                          "value": Response {
                            "payload": Object {
                              "key": "stats",
                              "response": Object {},
                            },
                            "type": "[Blockchain Data Feature API] Data service response",
                          },
                        },
                      },
                    ],
                    "scheduler": [Circular],
                    "subscriptions": Array [],
                  },
                ],
                "flushTests": Array [],
                "frame": 0,
                "hotObservables": Array [
                  [Circular],
                ],
                "index": -1,
                "maxFrames": 750,
                "now": [Function],
                "scheduled": undefined,
              },
              "subscriptions": Array [],
              "thrownError": null,
            },
            "values": Object {
              "a": FetchData {
                "payload": Object {
                  "key": "stats",
                  "query": null,
                },
                "type": "[Blockchain Data Feature API] Fetch data",
              },
            },
          },
        },
      },
    },
  },
}
`;
